{
    "contents" : "################################################################################\n# functions to set initial values and take information from state_list\n# when available\n################################################################################\n\nstate_singlevar <- function(inputvar, vars) vars[vars == state_list[[inputvar]]]\nstate_multvar <- function(inputvar, vars) vars[vars %in% state_list[[inputvar]]]\n\nstate_init <- function(inputvar, init = \"\") {\n  ifelse(is.null(state_list[[inputvar]]), return(init), return(state_list[[inputvar]]))\n}\n\nstate_init_list <- function(inputvar, init = \"\", vals) {\n  ifelse(is.null(state_list[[inputvar]]), return(init), return(state_singlevar(inputvar, vals)))\n}\n\nstate_init_multvar <- function(inputvar, pre_inputvar, vals) {\n  # for factor and cluster use variable selection from the pre-analysis\n  ifelse(is.null(state_list[[inputvar]]), return(vals[vals %in% pre_inputvar]),\n    return(state_multvar(inputvar, vals)))\n}\n\n#######################################\n# Load, Save, Reset app state\n#######################################\noutput$state <- renderUI({\n  sidebarLayout(\n    sidebarPanel(\n      wellPanel(\n        HTML(\"<label>Load previous app state:</label>\"),\n        fileInput('uploadState', ''),\n        uiOutput(\"refreshOnUpload\")\n      ),\n      wellPanel(\n        HTML(\"<label>Save current app state:</label>\"),\n        downloadButton('downloadState', 'Save')\n\n      ),\n      wellPanel(\n        HTML(\"<label>Reset to initial app state:</label>\"),\n        HTML(\"<a class='btn action-button shiny-bound-input' id='resetState' type='button' href='/'>Reset</a>\")\n      ),\n      wellPanel(\n        HTML(\"<label>Quit app:</label>\"),\n        actionButton('quitApp', 'Quit')\n      ),\n      helpModal('State','stateHelp',inclMD(\"../base/tools/help/state.md\"))\n    ),\n    mainPanel(\n      verbatimTextOutput(\"showInput\")\n    )\n  )\n})\n\nobserve({\n  inFile <- input$uploadState\n  if(!is.null(inFile)) {\n    isolate({\n      load(inFile$datapath)\n      if(exists(\"RadiantValues\")) values <<- do.call(reactiveValues, RadiantValues)\n      if(exists(\"RadiantInputs\")) state_list <<- RadiantInputs\n    })\n  }\n})\n\noutput$refreshOnUpload <- renderUI({\n  inFile <- input$uploadState\n  if(!is.null(inFile)) {\n    # Joe Cheng: https://groups.google.com/forum/#!topic/shiny-discuss/Olr8m0JwMTo\n    tags$script(\"window.location.reload();\")\n\n    #################################################################################\n    # todo: return to the state page or the page used before going to State.\n    # The below doesn't work ... yet\n    #################################################################################\n    # updateTabsetPanel(session, \"nav_radiant\", selected = \"State\")\n  }\n})\n\noutput$downloadState <- downloadHandler(\n  filename = function() { paste0(\"RadiantState-\",Sys.Date(),\".rda\") },\n  content = function(file) {\n\n    isolate({\n      RadiantInputs <- isolate(reactiveValuesToList(input))\n      RadiantValues <- isolate(reactiveValuesToList(values))\n      save(RadiantInputs, RadiantValues , file = file)\n    })\n  }\n)\n\nobserve({\n  if(is.null(input$resetState) || input$resetState == 0) return()\n  setInitValues()\n#   tags$script(\"window.location.reload();\")\n})\n\nobserve({\n  if(is.null(input$quitApp) || input$quitApp == 0) return()\n  unlink(c(\"www/rmd/cache/\",\"www/rmd/figure\"), recursive = TRUE)\n  stopApp()   # stop Radiant\n  q(\"no\")     # quit R\n})\n\noutput$showInput <- renderPrint({\n  cat(\"State list:\\n\")\n  print(state_list[sort(names(state_list))])\n})\n",
    "created" : 1411643677421.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3611931988",
    "id" : "52823882",
    "lastKnownWriteTime" : 1411644089,
    "path" : "~/Dropbox/radiant/inst/base/tools/app/state.R",
    "project_path" : "inst/base/tools/app/state.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}