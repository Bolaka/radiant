{
    "contents" : "# load required packages\nsource(\"../../radiant-miniCRAN/dependencies.R\", local = TRUE)\n\n############################################################\n# Start of main code\n############################################################\n\n# for debugging\noptions(shiny.trace = TRUE)\n# options(warn=2)\n# options(shiny.error=recover)\n\n# only write if running on developer computer\nvimKeyBinding <- FALSE\n# if(file.exists(\"/Users/vnijs/Dropbox/radiant\")) {\n#   # shiny.trace shows JSON packets transferred over websockets\n#   options(shiny.trace = TRUE)\n#   vimKeyBinding <- TRUE\n# }\n\n# Attempt to build automated testing into Radiant. Not available yet\ntestingRadiant <- FALSE\noptions(digits = 3)\n\n# pander for pretty printing of data and analysis output\n# panderOptions('digits',3)\n\n# detach(\"package:R.utils\", unload=TRUE)\n\n# allowing anyfile size when run locally\nif(Sys.getenv('SHINY_PORT') == \"\") {\n  # no limit to filesize locally\n  options(shiny.maxRequestSize=-1)\n  running_local <<- TRUE\n} else {\n  running_local <<- FALSE\n}\n\nsetInitValues <- function() {\n  # initialize state list and reactive values\n#   if(testingRadiant) {\n#     # Load previous state for testing purposes. Not yet implemented\n#   } else {\n\n    state_list <<- list()\n    values <<- reactiveValues()\n\n    # initial plot height and width\n    values$plotHeight <- 650\n    values$plotWidth <- 650\n\n    # Datasets can change over time (i.e. the changedata function). Therefore,\n    # the data need to be a reactive value so the other reactive functions\n    # and outputs that depend on these datasets will know when they are changed.\n    robj <- load(\"../base/data/data_init/diamonds.rda\")\n    df <- get(robj)\n    values[[\"diamonds\"]] <- df\n    values[[\"diamonds_descr\"]] <- attr(df,'description')\n    values$datasetlist <- c(\"diamonds\")\n#   }\n}\n\nsetInitValues()   # using a function here so it can also be called from state.R to reset the app\n\n# binding for a text input that updates when the return key is pressed\nreturnTextInput <- function(inputId, label, value = \"\") {\n  tagList(\n    # singleton(tags$head(tags$script(src = \"js/returnTextInputBinding.js\"))),\n    includeScript(\"../base/www/js/returnTextInputBinding.js\"),\n    tags$label(label, `for` = inputId),\n    tags$input(id = inputId, type = \"text\", value = value, class = \"returnTextInput\")\n  )\n}\n\n# binding for a sortable list of variables or factor levels\nhtml_list <- function(vars, id) {\n  hl <- paste0(\"<ul id=\\'\",id,\"\\' class='stab'>\")\n  for(i in vars) hl <- paste0(hl, \"<li class='ui-state-default stab'><span class='label'>\",i,\"</span></li>\")\n  paste0(hl, \"</ul>\")\n}\n\n# binding for a sortable list of variables or factor levels\nreturnOrder <- function(inputId, vars) {\n  tagList(\n    includeScript(\"../base/www/js/sort.js\"),\n    includeCSS(\"../base/www/sort.css\"),\n    HTML(html_list(vars, inputId)),\n    tags$script(paste0(\"$(function() {$( '#\",inputId,\"' ).sortable({placeholder: 'ui-state-highlight'}); $( '#\",inputId,\"' ).disableSelection(); });\"))\n  )\n}\n\n# binding to a bootstrap popover, function by Joe Cheng https://gist.github.com/jcheng5/5913297\nhelpPopup <- function(title, content, placement=c('right', 'top', 'left', 'bottom'),\n  trigger=c('click', 'hover', 'focus', 'manual')) {\n\n  tagList(\n    singleton(tags$head(tags$script(\"$(function() { $(\\\"[data-toggle='popover']\\\").popover(); })\"))),\n    tags$a(href = \"#\", `data-toggle` = \"popover\", title = title, `data-content` = content,\n      `data-placement` = match.arg(placement, several.ok=TRUE)[1],\n      `data-trigger` = match.arg(trigger, several.ok=TRUE)[1], tags$i(class=\"icon-question-sign\"))\n  )\n}\n\n# adding the figures path to avoid making a copy of all figures in www/figures\naddResourcePath(\"figures\", \"../base/tools/help/figures/\")\naddResourcePath(\"imgs\", \"../base/www/imgs/\")\n\n# binding to a bootstrap modal\nhelpModal <- function(title, link, content) {\n  html <- sprintf(\"<div id='%s' class='modal hide fade in' style='display: none; '>\n                     <div class='modal-header'><a class='close' data-dismiss='modal' href='#'>&times;</a>\n                       <h3>%s</h3>\n                     </div>\n                     <div class='modal-body'>%s</div>\n                   </div>\n                   <a title='Help' data-toggle='modal' href='#%s' class='icon-question-sign'></a>\", link, title, content, link)\n  Encoding(html) <- 'UTF-8'\n  withMathJax(HTML(html))\n}\n\nhelpAndReport <- function(title, link, content) {\n  html <- sprintf(\"<div id='%sHelp' class='modal hide fade in' style='display: none; '>\n                     <div class='modal-header'><a class='close' data-dismiss='modal' href='#'>&times;</a>\n                       <h3>%s</h3>\n                     </div>\n                     <div class='modal-body'>%s</div>\n                   </div>\n                   <div>\n                     <a title='Help' data-toggle='modal' href='#%sHelp' class='icon-question-sign alignleft'></a>\n                     <a title='Report results' class='icon-book action-button shiny-bound-input alignright' href='#%sReport' id='%sReport'></a>\n                   </div>\n                   <div style='clear: both;'></div>\n                   \", link, title, content, link, link, link)\n  withMathJax(HTML(html))\n}\n\ninclMD <- function(file)\n  return(\n    markdownToHTML(file, options = c(\"\"), stylesheet=\"../base/www/empty.css\")\n  )\n\ninclRmd <- function(path) {\n  # function to render .Rmd files to html on-the-fly\n  contents <- paste(readLines(path, warn = FALSE), collapse = '\\n')\n  # do not embed image or add css\n  html <- knit2html(text = contents, fragment.only = TRUE, options = \"\", stylesheet = \"www/empty.css\")\n  html\n}\n",
    "created" : 1411643724448.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3555646927",
    "id" : "9F0E634",
    "lastKnownWriteTime" : 1411644147,
    "path" : "~/Dropbox/radiant/inst/base/global.R",
    "project_path" : "inst/base/global.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}