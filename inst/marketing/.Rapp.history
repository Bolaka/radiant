x <- c(7,3,3,3,3,4,4,4)#
names(x) <- c("Verbal/Linguistic","Logical/Mathematical","Visual/Spatial","Bodily/Kinesthetic","Musical/Rhythmic","Interpersonal","Intrapersonal","Naturalist")#
#
library(ggplot2)
install.packages('radiant',repos=c("http://vnijs.rady.ucsd.edu/site_media/R", CRAN = "http://cran.rstudio.com"), dependencies = TRUE) #
shiny::runApp(system.file('marketing', package='radiant'), port = 8100)
ls
install.packages('radiant',repos=c("http://vnijs.rady.ucsd.edu/site_media/R", CRAN = "http://cran.rstudio.com"), dependencies = TRUE) #
shiny::runApp(system.file('marketing', package='radiant'), port = 8100)
install.packages('ggplot2')
x
ggplot(x, aes(y = x)) + geom_bar(stat = "identity")
)
install.packages('ggplot2')
library(ggplot2)
ggplot(x, aes(y = x)) + geom_bar(stat = "identity")
x
x <- data.frame(x)
x
ggplot(x, aes(y = x)) + geom_bar(stat = "identity")
styles <- data.frame(c(7,3,3,3,3,4,4,4))
styles <- data.frame(scores = c(7,3,3,3,3,4,4,4))
styles$category <- c("Verbal/Linguistic","Logical/Mathematical","Visual/Spatial","Bodily/Kinesthetic","Musical/Rhythmic","Interpersonal","Intrapersonal","Naturalist")
styles
ggplot(styles, aes(x = category, y = scores)) + geom_bar(stat = "identity")
styles#
ggplot(styles, aes(x = category, y = scores)) + geom_bar(stat = "identity") +#
	theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(styles, aes(x = category, y = scores, fill = category)) + geom_bar(stat = "identity") +#
	theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(styles, aes(x = category, y = scores, fill = category)) + geom_bar(stat = "identity") +#
	theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(legend.position = "none")
ggplot(styles, aes(x = category, y = scores, fill = category)) + geom_bar(stat = "identity") +#
	theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(legend.position = "none",  axis.title.x=element_blank())
ggplot(styles, aes(x = category, y = scores, fill = category)) + geom_bar(stat = "identity", alpha = .2) + 	theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(legend.position = "none",  axis.title.x=element_blank())
ggplot(styles, aes(x = category, y = scores, fill = category)) + geom_bar(stat = "identity", alpha = .5) + 	theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(legend.position = "none",  axis.title.x=element_blank())
styles <- data.frame(scores = c(42,25,29))#
styles$category <- c("Visual","Kinesthetic","Auditory")#
#
ggplot(styles, aes(x = category, y = scores, fill = category) +#
 geom_bar(width = 1) + coord_polar(theta = "y")
)
ggplot(styles, aes(x = category, y = scores, fill = category)) +#
 geom_bar(width = 1) + coord_polar(theta = "y")
ggplot(styles, aes(x = category, y = scores, fill = category)) +#
 geom_bar(width = 1) + coord_polar()
ggplot(styles, aes(x = scores, fill = category)) +#
 geom_bar(width = 1) + coord_polar(theta = "y")
ggplot(styles, aes(x = category, fill = category)) +#
 geom_bar(width = 1) + coord_polar(theta = "scores")
ggplot(styles, aes(y = scores, fill = category)) +#
 geom_bar(width = 1) + coord_polar(theta = "y")
ggplot(styles, aes(x = scores, fill = category)) +#
 geom_bar(width = 1) + coord_polar(theta = "y")
ggplot(styles, aes(x = factor(1), fill = scores)) +#
 geom_bar(width = 1) + coord_polar(theta = "y")
ggplot(styles, aes(x = scores, fill = scores)) +#
 geom_bar(width = 1) + coord_polar(theta = "y")
ggplot(styles, aes(x = category, fill = scores)) +#
 geom_bar(width = 1) + coord_polar(theta = "y")
ggplot(styles, aes(x = category, y = scores, fill = category)) +#
 geom_bar(width = 1)
pie(styles$scores, labels = styles$category)
pie(styles$scores, labels = styles$category, col=rainbow(3))
pie(styles$scores, labels = styles$category, col=c(15,30,45))
ggplotColours <- function(n=6, h=c(0, 360) +15){#
  if ((diff(h)%%360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}
pie(styles$scores, labels = styles$category, col=ggplotColours(3)))
pie(styles$scores, labels = styles$category, col=ggplotColours(3))
pie(styles$scores, labels = styles$category, col=alpha(ggplotColours(3),.5))
install.packages(scales)
install.packages("scales")
library(scales)
pie(styles$scores, labels = styles$category, col=alpha(ggplotColours(3),.5))
pie(styles$scores, labels = styles$category, col=alpha(ggplotColours(3),.2))
pie(styles$scores, labels = styles$category, col=alpha(ggplotColours(3),.3))
styles <- data.frame(scores = c(42,25,29))
styles$category <- paste0(c("Visual","Kinesthetic","Auditory"), " (", styles$scores, ")")
styles <- data.frame(scores = c(42,25,29))#
styles$category <- paste0(c("Visual","Kinesthetic","Auditory"), " (", styles$scores, ")")#
#
# ggplot(styles, aes(x = category, y = scores, fill = category)) +#
#  geom_bar(width = 1) #
#
ggplotColours <- function(n=6, h=c(0, 360) +15){#
  if ((diff(h)%%360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}#
#
# install.packages("scales")#
library(scales)#
#
pie(styles$scores, labels = styles$category, col=alpha(ggplotColours(3),.3))
ret <- load("~/Dropbox/share ART/alt_method/data/all.valence.ratings.n2p.2.Rdata")#
    ret <- get(ret)
ret
Install.packages(‘digest’)
install.packages(‘digest’)
install.packages('digest')
install.packages('shiny')
install.packages('radiant',repos=c("http://vnijs.rady.ucsd.edu/site_media/R", CRAN = "http://cran.rstudio.com"), dependencies = TRUE) #
shiny::runApp(system.file('marketing', package='radiant'), port = 8100)
shiny::runApp('radiant/inst/marketing', port = 8100)
.58x.15
.58*.15
1.5 * 27
790-656 / 790
(790-656) / 790
example(dendrogram)
library("sos"); findFn("{decision analysis}")
install.packages('sos')
library("sos"); findFn("{decision analysis}")
install.packages('utility')
help(utility)
library(utility)
help(utility)
widthvar <- #
    utility.endnode.discrete.create(#
      name.node     = "width variability",#
      attrib.levels = data.frame(widthvariability_class=#
                                 c("high","moderate","none")),#
      u             = c(1,0.4125,0),#
      names.u       = c("u.high","u_moderate","u.none"),#
      required      = FALSE,#
      utility       = FALSE)#
#
  print(widthvar)#
  plot(widthvar)
demo(utility)
demo('utility')
# define discrete end node for width variability#
  # (attribute "widthvariability_class" with levels "high", #
  # "moderate" and "none")#
  widthvar <- #
    utility.endnode.discrete.create(#
      name.node     = "width variability",#
      attrib.levels = data.frame(widthvariability_class=#
                                 c("high","moderate","none")),#
      u             = c(1,0.4125,0),#
      names.u       = c("u.high","u_moderate","u.none"),#
      required      = FALSE,#
      utility       = FALSE)#
#
  # define 1d interpolation end node for bed modification with #
  # riprap#
  # (attribute "bedmodfract_percent" with levels from 0 to 100)#
  bedmod_riprap <-#
    utility.endnode.intpol1d.create(#
      name.node   = "bed modification riprap",#
      name.attrib = "bedmodfract_percent",#
      range       = c(0,100),#
      x           = c(0,10,30,100),#
      u           = c(1,0.775,0.5625,0.24),#
      required    = FALSE,#
      utility     = FALSE)#
  # define 1d interpolation end node for bed modification with #
  # other material#
  # (attribute "bedmodfract_percent" with levels from 0 to 100)#
  bedmod_other <-#
    utility.endnode.intpol1d.create(#
      name.node   = "bed modification other",#
      name.attrib = "bedmodfract_percent",#
      range       = c(0,100),#
      x           = c(0,10,30,100),#
      u           = c(1,0.775,0.5625,0),#
      required    = FALSE,#
      utility     = FALSE)#
  # define combination end node for bed modification#
  # (attributes "bedmodtype_class" and "bedmodfract_percent")#
  bedmod <-#
    utility.endnode.cond.create(#
      name.node     = "bed modification",#
      attrib.levels = data.frame(bedmodtype_class=#
                                 c("riprap","other")),#
      nodes         = list(bedmod_riprap,bedmod_other),#
      required      = FALSE,#
      utility       = FALSE)#
  # define 1d interpolation end node for bank modification with #
  # permeable material#
  # (attribute "bankmodfract_percent" with levels from 0 to 100)#
  bankmod_perm <-#
    utility.endnode.intpol1d.create(#
      name.node   = "bank modification perm",#
      name.attrib = "bankmodfract_percent",#
      range       = c(0,100),#
      x           = c(0,10,30,60,100),#
      u           = c(1,0.8667,0.675,0.4125,0.24),#
      required    = FALSE,#
      utility     = FALSE)#
  # define 1d interpolation end node for bank modification with #
  # impermeable material#
  # (attribute "bankmodfract_percent" with levels from 0 to 100)#
  bankmod_imperm <-#
    utility.endnode.intpol1d.create(#
      name.node   = "bank modification imperm",#
      name.attrib = "bankmodfract_percent",#
      range       = c(0,100),#
      x           = c(0,10,30,60,100),#
      u           = c(1,0.775,0.5625,0.24,0),#
      required    = FALSE,#
      utility     = FALSE)#
  # define combination end node for bank modification#
  # (attributes "bankmodtype_class" and "bankmodfract_percent")#
  bankmod <-#
    utility.endnode.cond.create(#
      name.node     = "bank modification",#
      attrib.levels = data.frame(bankmodtype_class=#
                                 c("perm","imperm")),#
      nodes         = list(bankmod_perm,bankmod_imperm),#
      required      = FALSE,#
      utility       = FALSE)#
#
  # define 2d interpolation end node for riparian zone width#
  # (attributes "riparianzonewidth_m" and "riparianzonewidth_m")#
#
  riparzone_width <-#
    utility.endnode.intpol2d.create(#
      name.node   = "riparian zone width",#
      name.attrib = c("riverbedwidth_m","riparianzonewidth_m"),#
      ranges      = list(c(0,16),c(0,30)),#
      isolines    = list(list(x=c(0,16),y=c(0,0)),#
                         list(x=c(0,2,10,16),y=c(5,5,15,15)),#
                         list(x=c(0,16),y=c(15,15)),#
                         list(x=c(0,16),y=c(30,30))),#
      u           = c(0.0,0.6,1.0,1.0),#
      lead         = 1,#
      utility      = FALSE)#
#
  # define discrete end node for riparian zone vegetation#
  # (attriute "riparianzoneveg_class" with levels "natural", #
  # "seminatural" and "artificial")#
#
  riparzone_veg <-#
    utility.endnode.discrete.create(#
      name.node     = "riparian zone veg.",#
      attrib.levels = data.frame(riparianzoneveg_class=#
                                 c("natural","seminatural","artificial")),#
      u             = c(1,0.5625,0),#
      required      = FALSE,#
      utility       = FALSE)#
  # define aggregation node for riparian zone#
  riparzone <-#
    utility.aggregation.create(#
      name.node = "riparian zone",#
      nodes     = list(riparzone_width,riparzone_veg),#
      name.fun  = "utility.aggregate.cobbdouglas",#
      par       = c(1,1),#
      required  = FALSE)#
  # define aggregation node for ecomorphological state#
  morphol <-#
    utility.aggregation.create(#
      name.node = "ecomorphology",#
      nodes     = list(widthvar,bedmod,bankmod,riparzone),#
      name.fun  = "utility.aggregate.mix",#
      par       = c(0.25,0.25,0.25,0.25,0,0,1),#
      names.par = c("w_widthvar","w_bedmod","w_bankmod","w_riparzone",#
                    "w_add","w_min","w_cobbdouglas"),#
      required  = TRUE)#
  # print individual definitions#
  print(widthvar)#
  print(bedmod)#
  # print all definitions#
  print(morphol)#
  # plot objectives hierarchy with attributes#
  plot(morphol)#
  # plot individual nodes:#
#
  plot(widthvar)#
  plot(widthvar,par=c(u_moderate=0.2))#
  plot(bedmod_other)#
  plot(bankmod)#
  #plot(riparzone_width)#
  # plot selected node definitions of a hierarchy#
  plot(morphol,type="nodes",nodes=c("width variability",#
                                    "bed modification other",#
                                    "bank modification"))#
#
  # evaluate value function for data sets and plot colored hierarchies#
  # and table#
  attrib_channelized <- data.frame(widthvariability_class = "none",#
                                   bedmodtype_class       = "riprap",#
                                   bedmodfract_percent    = 50,#
                                   bankmodtype_class      = "imperm",#
                                   bankmodfract_percent   = 70,#
                                   riverbedwidth_m        = 10,#
                                   riparianzonewidth_m    = 5,#
                                   riparianzoneveg_class  = "seminatural")#
  attrib_rehab       <- data.frame(widthvariability_class = "high",#
                                   bedmodtype_class       = "riprap",#
                                   bedmodfract_percent    = 50,#
                                   bankmodtype_class      = "imperm",#
                                   bankmodfract_percent   = 20,#
                                   riverbedwidth_m        = 15,#
                                   riparianzonewidth_m    = 15,#
                                   riparianzoneveg_class  = "natural")#
  res_channelized     <- evaluate(morphol,attrib=attrib_channelized)#
  res_channelized_add <- evaluate(morphol,attrib=attrib_channelized,#
                                  par=c(w_add=1,w_min=0,w_cobbdouglas=0))#
  res_rehab           <- evaluate(morphol,attrib=attrib_rehab)#
  res_both            <- rbind(res_channelized,res_rehab)#
  rownames(res_both)  <- c("channelized","rehabilitated")#
  plot(morphol,u=res_channelized)#
  plot(morphol,u=res_channelized_add)#
  plot(morphol,u=res_rehab)#
  plot(morphol,u=res_rehab,uref=res_channelized)#
  plot(morphol,u=res_both,type="table")#
#
  # consideration of uncertain attribute levels (higher uncertainty for #
  # predicted state after rehabilitation than for observed channelized state):#
  sampsize <- 2000#
  attrib_channelized_unc <- data.frame(#
    widthvariability_class = rep("high",sampsize),#
    bedmodtype_class       = rep("riprap",sampsize),#
    bedmodfract_percent    = rnorm(sampsize,mean=50,sd=5),#
    bankmodtype_class      = rep("imperm",sampsize),#
    bankmodfract_percent   = rnorm(sampsize,mean=70,sd=5),#
    riverbedwidth_m        = rep(10,sampsize),#
    riparianzonewidth_m    = rep(5,sampsize),#
    riparianzoneveg_class  = c("seminatural","artificial")[rbinom(sampsize,1,0.5)+1])#
#
  attrib_rehab_unc <- data.frame(#
    widthvariability_class = c("moderate","high")[rbinom(sampsize,1,0.5)+1],#
    bedmodtype_class       = rep("riprap",sampsize),#
    bedmodfract_percent    = rnorm(sampsize,mean=50,sd=15),#
    bankmodtype_class      = rep("imperm",sampsize),#
    bankmodfract_percent   = rnorm(sampsize,mean=20,sd=5),#
    riverbedwidth_m        = rnorm(sampsize,mean=10,sd=2),#
    riparianzonewidth_m    = rnorm(sampsize,mean=10,sd=2),#
    riparianzoneveg_class  = c("natural","seminatural")[rbinom(sampsize,1,0.5)+1])#
#
  res_channelized_unc <- evaluate(morphol,attrib=attrib_channelized_unc)#
  res_rehab_unc       <- evaluate(morphol,attrib=attrib_rehab_unc)#
#
  plot(morphol,u=res_channelized_unc)#
  plot(morphol,u=res_rehab_unc)#
  plot(morphol,u=res_rehab_unc,uref=res_channelized_unc)
x <-rnorm(100)
x_1 <- lag(x)
x_1
lm(x ~ x_1)
summary(lm(x ~ x_1))
y = rnorm(100)
x = y[1:99]
y <- rnorm(100)
x <- y[1:99]
y <- y[2:100]
summary(y ~ x)
summary(lm(y ~ x))
diff(y)
y <- rnorm(100)#
x <- y[1:99] #
y <- y[2:100]#
d_y <- y - x#
#
summary(lm(y ~ x))
summary(lm(d_y ~ x))
load("/Users/vnijs/Desktop/mergeTestData2.rda")
ls()
rm(list = ls())
ls()
load("/Users/vnijs/Desktop/mergeTestData2.rda")
ls()
str(contribPeople)
str(userCommunitySize)
save(userCommunitySize, file = "~/Desktop/ucs.rda")
17500/12
update.packages()
install.packages('shiny')
94-19
69/75
Sys.setlocale(category = 'LC_ALL','en_US.UTF-8')
shiny::runApp('~/Desktop/radiant/', port = 8100)
Sys.setlocale(category = 'LC_ALL','en_US.UTF-8')
shiny::runApp('~/Dropbox/radiant/inst/marketing', port = 8100)
Sys.setlocale(category = 'LC_ALL','en_US.UTF-8')
shiny::runApp('~/Dropbox/radiant/inst/marketing', port = 8100)
Sys.setlocale(category = 'LC_ALL','en_US.UTF-8')
shiny::runApp('~/Dropbox/radiant/inst/marketing', port = 8100)
Sys.setlocale(category = 'LC_ALL','en_US.UTF-8')
shiny::runApp('~/Dropbox/radiant/inst/marketing', port = 8100)
Sys.setlocale(category = 'LC_ALL','en_US.UTF-8')
shiny::runApp('~/Dropbox/radiant/inst/marketing', port = 8100)
Sys.setlocale(category = 'LC_ALL','en_US.UTF-8')
shiny::runApp('~/Dropbox/radiant/inst/marketing', port = 8100)
setwd(~/Dropbox/radiant')
source('launchers/dependencies.R')
Sys.setlocale(category = 'LC_ALL','en_US.UTF-8')
shiny::runApp('inst/marketing', port = 8100)
Sys.getenv("R_LIBS_USER")
list.files(local_dir)
local_dir <- Sys.getenv("R_LIBS_USER")
list.files(local_dir)
options(repos = c(CRAN = "http://cran.rstudio.com"))
local_dir <- Sys.getenv("R_LIBS_USER")
list.files(local_dir)
if(!file.exists(local_dir)) dir.create(local_dir, recursive = TRUE)
libs <- c("R.utils", "MASS", "car", "gridExtra", "psych",
"vegan", "lubridate", "wordcloud", "AlgDesign", "markdown", "knitr",
"plyr", "tidyr", "dplyr", "ggplot2", "shiny", "shinyAce")
# check if all packages in libs are available
available <- suppressWarnings(sapply(libs, require, lib.loc = local_dir, character.only=TRUE))
inst.libs <- libs[available == FALSE]
inst.libs
available
list.files(local_dir)
install.packages('shiny',local_dir)
setwd('~/Dropbox/radiant/inst/marketing')
source('../../radiant-miniCRAN/dependencies.R')
Sys.setlocale(category = 'LC_ALL','en_US.UTF-8')
shiny::runApp('../marketing', port = 4475)
mcran <- paste0("file://",normalizePath("~/Dropbox/radiant/radiant-miniCRAN"))
mcran
source(paste0(mcran,"/pkgs.R"))
pkgs
mcran <- paste0("file://",normalizePath("~/Dropbox/radiant/radiant-miniCRAN"))
mcran
local_dir <- Sys.getenv("R_LIBS_USER")
if(!file.exists(local_dir)) dir.create(local_dir, recursive = TRUE)
source(paste0(mcran,"/pkgs.R"))
available <- suppressWarnings(sapply(pkgs, require, lib.loc = c(local_dir), character.only=TRUE))
inst.libs <- pkgs[available == FALSE]
inst.libs
if(length(inst.libs) != 0) {#
  install.packages(inst.libs, local_dir, repos = mcran)#
  suppressWarnings(sapply(inst.libs, require, lib.loc = c(local_dir), #
  	character.only=TRUE))#
}
# check if all packages in libs are installed locally#
available <- suppressWarnings(sapply(pkgs, require, lib.loc = c(local_dir), character.only=TRUE))#
inst.libs <- pkgs[available == FALSE]#
inst.libs
